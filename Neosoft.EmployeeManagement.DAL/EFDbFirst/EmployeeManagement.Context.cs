//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Neosoft.EmployeeManagement.DAL.EFDbFirst
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NeoSoft_ShubhangiHoleEntities : DbContext
    {
        public NeoSoft_ShubhangiHoleEntities()
            : base("name=NeoSoft_ShubhangiHoleEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<EmployeeMaster> EmployeeMasters { get; set; }
        public virtual DbSet<State> States { get; set; }
    
        public virtual int stp_Emp_DeleteEmployeeMaster(Nullable<int> row_Id)
        {
            var row_IdParameter = row_Id.HasValue ?
                new ObjectParameter("Row_Id", row_Id) :
                new ObjectParameter("Row_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_Emp_DeleteEmployeeMaster", row_IdParameter);
        }
    
        public virtual ObjectResult<stp_Emp_GetAllCity_Result> stp_Emp_GetAllCity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_Emp_GetAllCity_Result>("stp_Emp_GetAllCity");
        }
    
        public virtual ObjectResult<stp_Emp_GetAllCountry_Result> stp_Emp_GetAllCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_Emp_GetAllCountry_Result>("stp_Emp_GetAllCountry");
        }
    
        public virtual ObjectResult<stp_Emp_GetAllEmployeeMaster_Result> stp_Emp_GetAllEmployeeMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_Emp_GetAllEmployeeMaster_Result>("stp_Emp_GetAllEmployeeMaster");
        }
    
        public virtual ObjectResult<stp_Emp_GetAllState_Result> stp_Emp_GetAllState()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_Emp_GetAllState_Result>("stp_Emp_GetAllState");
        }
    
        public virtual ObjectResult<Nullable<decimal>> stp_Emp_InsertEmployeeMaster(string firstName, string lastName, Nullable<int> countryId, Nullable<int> stateId, Nullable<int> cityId, string emailAddress, string mobileNumber, string panNumber, string passportNumber, string profileImage, Nullable<bool> gender, Nullable<bool> isActive, Nullable<System.DateTime> dateOfBirth, Nullable<System.DateTime> dateOfJoinee, Nullable<System.DateTime> createdDate)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var panNumberParameter = panNumber != null ?
                new ObjectParameter("PanNumber", panNumber) :
                new ObjectParameter("PanNumber", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var profileImageParameter = profileImage != null ?
                new ObjectParameter("ProfileImage", profileImage) :
                new ObjectParameter("ProfileImage", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("dateOfBirth", dateOfBirth) :
                new ObjectParameter("dateOfBirth", typeof(System.DateTime));
    
            var dateOfJoineeParameter = dateOfJoinee.HasValue ?
                new ObjectParameter("dateOfJoinee", dateOfJoinee) :
                new ObjectParameter("dateOfJoinee", typeof(System.DateTime));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("stp_Emp_InsertEmployeeMaster", firstNameParameter, lastNameParameter, countryIdParameter, stateIdParameter, cityIdParameter, emailAddressParameter, mobileNumberParameter, panNumberParameter, passportNumberParameter, profileImageParameter, genderParameter, isActiveParameter, dateOfBirthParameter, dateOfJoineeParameter, createdDateParameter);
        }
    
        public virtual int stp_Emp_UpdateEmployeeMaster(Nullable<int> row_Id, string firstName, string lastName, Nullable<int> countryId, Nullable<int> stateId, Nullable<int> cityId, string emailAddress, string mobileNumber, string panNumber, string passportNumber, string profileImage, Nullable<bool> gender, Nullable<bool> isActive, Nullable<System.DateTime> dateOfBirth, Nullable<System.DateTime> dateOfJoinee, Nullable<System.DateTime> updateDate)
        {
            var row_IdParameter = row_Id.HasValue ?
                new ObjectParameter("Row_Id", row_Id) :
                new ObjectParameter("Row_Id", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var panNumberParameter = panNumber != null ?
                new ObjectParameter("PanNumber", panNumber) :
                new ObjectParameter("PanNumber", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var profileImageParameter = profileImage != null ?
                new ObjectParameter("ProfileImage", profileImage) :
                new ObjectParameter("ProfileImage", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("dateOfBirth", dateOfBirth) :
                new ObjectParameter("dateOfBirth", typeof(System.DateTime));
    
            var dateOfJoineeParameter = dateOfJoinee.HasValue ?
                new ObjectParameter("dateOfJoinee", dateOfJoinee) :
                new ObjectParameter("dateOfJoinee", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_Emp_UpdateEmployeeMaster", row_IdParameter, firstNameParameter, lastNameParameter, countryIdParameter, stateIdParameter, cityIdParameter, emailAddressParameter, mobileNumberParameter, panNumberParameter, passportNumberParameter, profileImageParameter, genderParameter, isActiveParameter, dateOfBirthParameter, dateOfJoineeParameter, updateDateParameter);
        }
    }
}
